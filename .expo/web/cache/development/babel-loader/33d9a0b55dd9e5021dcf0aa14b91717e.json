{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _this = this,\n    _jsxFileName = \"/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/src/features/map/screens/MapScreen.js\";\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport MapView from 'react-native-maps';\nimport styled from 'styled-components/native';\nimport { LocationContext } from \"../../../services/location/LocationContext\";\nimport { RestaurantsContext } from \"../../../services/restaurants/RestaurantsContext\";\nimport { Search } from \"../components/Search\";\nimport { MapCallout } from \"../components/MapCallout\";\nvar Map = styled(MapView)(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  height: 100%;\\n  width: 100%;\\n\"])));\n\nvar RestaurantMap = function RestaurantMap(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(LocationContext),\n      location = _useContext.location;\n\n  var _useContext2 = useContext(RestaurantsContext),\n      _useContext2$restaura = _useContext2.restaurants,\n      restaurants = _useContext2$restaura === void 0 ? [] : _useContext2$restaura;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      latDelta = _useState2[0],\n      setLatDelta = _useState2[1];\n\n  var lat = location.lat,\n      lng = location.lng,\n      viewport = location.viewport;\n  useEffect(function () {\n    var northeastLat = viewport.northeast.lat;\n    var southwestLat = viewport.southwest.lat;\n    setLatDelta(northeastLat - southwestLat);\n  }, [location, viewport]);\n  return React.createElement(React.Fragment, null, React.createElement(Search, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), React.createElement(Map, {\n    region: {\n      latitude: lat,\n      longitude: lng,\n      latitudeDelta: latDelta,\n      longitudeDelta: 0.01\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, restaurants.map(function (restaurant) {\n    return React.createElement(MapView.Marker, {\n      key: restaurant.name,\n      title: restaurant.name,\n      coordinate: {\n        latitude: restaurant.geometry.location.lat,\n        longitude: restaurant.geometry.location.lng\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, React.createElement(MapView.Callout, {\n      onPress: function onPress() {\n        return navigation.navigate('RestaurantDetail', {\n          restaurant: restaurant\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }, React.createElement(MapCallout, {\n      restaurant: restaurant,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    })));\n  })));\n};\n\nexport var MapScreen = function MapScreen(_ref2) {\n  var navigation = _ref2.navigation;\n\n  var _useContext3 = useContext(LocationContext),\n      location = _useContext3.location;\n\n  if (!location) {\n    return React.createElement(Map, {\n      region: {\n        latitude: 0,\n        longitude: 0\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(RestaurantMap, {\n    navigation: navigation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/src/features/map/screens/MapScreen.js"],"names":["React","useContext","useState","useEffect","MapView","styled","LocationContext","RestaurantsContext","Search","MapCallout","Map","RestaurantMap","navigation","location","restaurants","latDelta","setLatDelta","lat","lng","viewport","northeastLat","northeast","southwestLat","southwest","latitude","longitude","latitudeDelta","longitudeDelta","map","restaurant","name","geometry","navigate","MapScreen"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport MapView from 'react-native-maps';\nimport styled from 'styled-components/native';\n\nimport { LocationContext } from '../../../services/location/LocationContext';\nimport { RestaurantsContext } from '../../../services/restaurants/RestaurantsContext';\n\nimport { Search } from '../components/Search';\nimport { MapCallout } from '../components/MapCallout';\n\nconst Map = styled(MapView)`\n  height: 100%;\n  width: 100%;\n`;\n\nconst RestaurantMap = ({ navigation }) => {\n  const { location } = useContext(LocationContext);\n  const { restaurants = [] } = useContext(RestaurantsContext);\n\n  const [latDelta, setLatDelta] = useState(0);\n  const { lat, lng, viewport } = location;\n\n  useEffect(() => {\n    const northeastLat = viewport.northeast.lat;\n    const southwestLat = viewport.southwest.lat;\n\n    setLatDelta(northeastLat - southwestLat);\n  }, [location, viewport]);\n\n  return (\n    <>\n      <Search />\n      <Map\n        region={{\n          latitude: lat,\n          longitude: lng,\n          latitudeDelta: latDelta,\n          longitudeDelta: 0.01,\n        }}\n      >\n        {restaurants.map((restaurant) => {\n          return (\n            <MapView.Marker\n              key={restaurant.name}\n              title={restaurant.name}\n              coordinate={{\n                latitude: restaurant.geometry.location.lat,\n                longitude: restaurant.geometry.location.lng,\n              }}\n            >\n              <MapView.Callout\n                onPress={() =>\n                  navigation.navigate('RestaurantDetail', { restaurant })\n                }\n              >\n                <MapCallout restaurant={restaurant} />\n              </MapView.Callout>\n            </MapView.Marker>\n          );\n        })}\n      </Map>\n    </>\n  );\n};\n\nexport const MapScreen = ({ navigation }) => {\n  const { location } = useContext(LocationContext);\n  if (!location) {\n    return (\n      <Map\n        region={{\n          latitude: 0,\n          longitude: 0,\n        }}\n      />\n    );\n  }\n  return <RestaurantMap navigation={navigation} />;\n};\n"]},"metadata":{},"sourceType":"module"}