{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/src/services/location/LocationContext.js\";\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { locationRequest, locationTransform } from \"./location.service\";\nexport var LocationContext = createContext();\nexport var LocationContextProvider = function LocationContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var _useState7 = useState('San Francisco'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      keyword = _useState8[0],\n      setKeyword = _useState8[1];\n\n  var onSearch = function onSearch(searchKeyword) {\n    setIsLoading(true);\n    setKeyword(searchKeyword);\n  };\n\n  useEffect(function () {\n    if (!keyword.length) {\n      return;\n    }\n\n    locationRequest(keyword.toLowerCase()).then(locationTransform).then(function (result) {\n      setError(null);\n      setIsLoading(false);\n      setLocation(result);\n    }).catch(function (err) {\n      setIsLoading(false);\n      setError(err);\n    });\n  }, [keyword]);\n  return React.createElement(LocationContext.Provider, {\n    value: {\n      isLoading: isLoading,\n      error: error,\n      location: location,\n      keyword: keyword,\n      search: onSearch\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/src/services/location/LocationContext.js"],"names":["React","createContext","useState","useEffect","locationRequest","locationTransform","LocationContext","LocationContextProvider","children","isLoading","setIsLoading","error","setError","location","setLocation","keyword","setKeyword","onSearch","searchKeyword","length","toLowerCase","then","result","catch","err","search"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,SAASC,eAAT,EAA0BC,iBAA1B;AAEA,OAAO,IAAMC,eAAe,GAAGL,aAAa,EAArC;AAEP,OAAO,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACvD,kBAAkCN,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA0BR,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAgCV,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOW,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8BZ,QAAQ,CAAC,eAAD,CAAtC;AAAA;AAAA,MAAOa,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,aAAD,EAAmB;AAClCR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAM,IAAAA,UAAU,CAACE,aAAD,CAAV;AACD,GAHD;;AAKAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACY,OAAO,CAACI,MAAb,EAAqB;AACnB;AACD;;AACDf,IAAAA,eAAe,CAACW,OAAO,CAACK,WAAR,EAAD,CAAf,CACGC,IADH,CACQhB,iBADR,EAEGgB,IAFH,CAEQ,UAACC,MAAD,EAAY;AAChBV,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,MAAAA,WAAW,CAACQ,MAAD,CAAX;AACD,KANH,EAOGC,KAPH,CAOS,UAACC,GAAD,EAAS;AACdd,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACY,GAAD,CAAR;AACD,KAVH;AAWD,GAfQ,EAeN,CAACT,OAAD,CAfM,CAAT;AAiBA,SACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AAAEN,MAAAA,SAAS,EAATA,SAAF;AAAaE,MAAAA,KAAK,EAALA,KAAb;AAAoBE,MAAAA,QAAQ,EAARA,QAApB;AAA8BE,MAAAA,OAAO,EAAPA,OAA9B;AAAuCU,MAAAA,MAAM,EAAER;AAA/C,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGT,QAHH,CADF;AAOD,CAnCM","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nimport { locationRequest, locationTransform } from './location.service';\n\nexport const LocationContext = createContext();\n\nexport const LocationContextProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [location, setLocation] = useState(null);\n  const [keyword, setKeyword] = useState('San Francisco');\n\n  const onSearch = (searchKeyword) => {\n    setIsLoading(true);\n    setKeyword(searchKeyword);\n  };\n\n  useEffect(() => {\n    if (!keyword.length) {\n      return; // Do nothing\n    }\n    locationRequest(keyword.toLowerCase())\n      .then(locationTransform)\n      .then((result) => {\n        setError(null);\n        setIsLoading(false);\n        setLocation(result);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setError(err);\n      });\n  }, [keyword]);\n\n  return (\n    <LocationContext.Provider\n      value={{ isLoading, error, location, keyword, search: onSearch }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}