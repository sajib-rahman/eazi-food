{"ast":null,"code":"import camelize from 'camelize';\nimport { host, isMock } from \"../../utils/env\";\nexport var locationRequest = function locationRequest(searchTerm) {\n  return fetch(host + \"/geocode?city=\" + searchTerm + \"&mock=\" + isMock).then(function (res) {\n    return res.json();\n  });\n};\nexport var locationTransform = function locationTransform(result) {\n  var formattedResponse = camelize(result);\n  var _formattedResponse$re = formattedResponse.results[0].geometry,\n      geometry = _formattedResponse$re === void 0 ? {} : _formattedResponse$re;\n  var _geometry$location = geometry.location,\n      lat = _geometry$location.lat,\n      lng = _geometry$location.lng;\n  return {\n    lat: lat,\n    lng: lng,\n    viewport: geometry.viewport\n  };\n};","map":{"version":3,"sources":["/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/src/services/location/location.service.js"],"names":["camelize","host","isMock","locationRequest","searchTerm","fetch","then","res","json","locationTransform","result","formattedResponse","results","geometry","location","lat","lng","viewport"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,IAAT,EAAeC,MAAf;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AAC7C,SAAOC,KAAK,CAAIJ,IAAJ,sBAAyBG,UAAzB,cAA4CF,MAA5C,CAAL,CAA2DI,IAA3D,CACL,UAACC,GAAD,EAAS;AACP,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,GAHI,CAAP;AAKD,CANM;AAQP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAAY;AAC3C,MAAMC,iBAAiB,GAAGX,QAAQ,CAACU,MAAD,CAAlC;AACA,8BAA0BC,iBAAiB,CAACC,OAAlB,CAA0B,CAA1B,CAA1B,CAAQC,QAAR;AAAA,MAAQA,QAAR,sCAAmB,EAAnB;AACA,2BAAqBA,QAAQ,CAACC,QAA9B;AAAA,MAAQC,GAAR,sBAAQA,GAAR;AAAA,MAAaC,GAAb,sBAAaA,GAAb;AAEA,SAAO;AAAED,IAAAA,GAAG,EAAHA,GAAF;AAAOC,IAAAA,GAAG,EAAHA,GAAP;AAAYC,IAAAA,QAAQ,EAAEJ,QAAQ,CAACI;AAA/B,GAAP;AACD,CANM","sourcesContent":["import camelize from 'camelize';\nimport { host, isMock } from '../../utils/env';\n\nexport const locationRequest = (searchTerm) => {\n  return fetch(`${host}/geocode?city=${searchTerm}&mock=${isMock}`).then(\n    (res) => {\n      return res.json();\n    }\n  );\n};\n\nexport const locationTransform = (result) => {\n  const formattedResponse = camelize(result);\n  const { geometry = {} } = formattedResponse.results[0];\n  const { lat, lng } = geometry.location;\n\n  return { lat, lng, viewport: geometry.viewport };\n};\n"]},"metadata":{},"sourceType":"module"}