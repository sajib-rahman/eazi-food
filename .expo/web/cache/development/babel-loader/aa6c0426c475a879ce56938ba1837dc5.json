{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/node_modules/react-native-credit-card-input/src/CCInput.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nvar s = StyleSheet.create({\n  baseInputStyle: {\n    color: \"black\"\n  }\n});\n\nvar CCInput = function (_Component) {\n  _inherits(CCInput, _Component);\n\n  var _super = _createSuper(CCInput);\n\n  function CCInput() {\n    var _this;\n\n    _classCallCheck(this, CCInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.componentWillReceiveProps = function (newProps) {\n      var _this$props = _this.props,\n          status = _this$props.status,\n          value = _this$props.value,\n          onBecomeEmpty = _this$props.onBecomeEmpty,\n          onBecomeValid = _this$props.onBecomeValid,\n          field = _this$props.field;\n      var newStatus = newProps.status,\n          newValue = newProps.value;\n      if (value !== \"\" && newValue === \"\") onBecomeEmpty(field);\n      if (status !== \"valid\" && newStatus === \"valid\") onBecomeValid(field);\n    };\n\n    _this.focus = function () {\n      return _this.refs.input.focus();\n    };\n\n    _this._onFocus = function () {\n      return _this.props.onFocus(_this.props.field);\n    };\n\n    _this._onChange = function (value) {\n      return _this.props.onChange(_this.props.field, value);\n    };\n\n    return _this;\n  }\n\n  _createClass(CCInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          label = _this$props2.label,\n          value = _this$props2.value,\n          placeholder = _this$props2.placeholder,\n          status = _this$props2.status,\n          keyboardType = _this$props2.keyboardType,\n          containerStyle = _this$props2.containerStyle,\n          inputStyle = _this$props2.inputStyle,\n          labelStyle = _this$props2.labelStyle,\n          validColor = _this$props2.validColor,\n          invalidColor = _this$props2.invalidColor,\n          placeholderColor = _this$props2.placeholderColor,\n          additionalInputProps = _this$props2.additionalInputProps;\n      return React.createElement(TouchableOpacity, {\n        onPress: this.focus,\n        activeOpacity: 0.99,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, !!label && React.createElement(Text, {\n        style: [labelStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 24\n        }\n      }, label), React.createElement(TextInput, _extends({\n        ref: \"input\"\n      }, additionalInputProps, {\n        keyboardType: keyboardType,\n        autoCapitalise: \"words\",\n        autoCorrect: false,\n        style: [s.baseInputStyle, inputStyle, validColor && status === \"valid\" ? {\n          color: validColor\n        } : invalidColor && status === \"invalid\" ? {\n          color: invalidColor\n        } : {}],\n        underlineColorAndroid: \"transparent\",\n        placeholderTextColor: placeholderColor,\n        placeholder: placeholder,\n        value: value,\n        onFocus: this._onFocus,\n        onChangeText: this._onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n\n  return CCInput;\n}(Component);\n\nCCInput.propTypes = {\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  keyboardType: PropTypes.string,\n  status: PropTypes.oneOf([\"valid\", \"invalid\", \"incomplete\"]),\n  containerStyle: ViewPropTypes.style,\n  inputStyle: Text.propTypes.style,\n  labelStyle: Text.propTypes.style,\n  validColor: PropTypes.string,\n  invalidColor: PropTypes.string,\n  placeholderColor: PropTypes.string,\n  onFocus: PropTypes.func,\n  onChange: PropTypes.func,\n  onBecomeEmpty: PropTypes.func,\n  onBecomeValid: PropTypes.func,\n  additionalInputProps: PropTypes.shape(TextInput.propTypes)\n};\nCCInput.defaultProps = {\n  label: \"\",\n  value: \"\",\n  status: \"incomplete\",\n  containerStyle: {},\n  inputStyle: {},\n  labelStyle: {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {},\n  onBecomeEmpty: function onBecomeEmpty() {},\n  onBecomeValid: function onBecomeValid() {},\n  additionalInputProps: {}\n};\nexport { CCInput as default };","map":{"version":3,"sources":["/Users/mdabdurrahman/Desktop/Mobile App/MOBILE APPLICATION PROJECT/PROJECT/P/node_modules/react-native-credit-card-input/src/CCInput.js"],"names":["React","Component","PropTypes","ViewPropTypes","s","StyleSheet","create","baseInputStyle","color","CCInput","componentWillReceiveProps","newProps","props","status","value","onBecomeEmpty","onBecomeValid","field","newStatus","newValue","focus","refs","input","_onFocus","onFocus","_onChange","onChange","label","placeholder","keyboardType","containerStyle","inputStyle","labelStyle","validColor","invalidColor","placeholderColor","additionalInputProps","propTypes","string","isRequired","oneOf","style","Text","func","shape","TextInput","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  ViewPropTypes,\n} from \"react-native\";\n\nconst s = StyleSheet.create({\n  baseInputStyle: {\n    color: \"black\",\n  },\n});\n\nexport default class CCInput extends Component {\n  static propTypes = {\n    field: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    keyboardType: PropTypes.string,\n\n    status: PropTypes.oneOf([\"valid\", \"invalid\", \"incomplete\"]),\n\n    containerStyle: ViewPropTypes.style,\n    inputStyle: Text.propTypes.style,\n    labelStyle: Text.propTypes.style,\n    validColor: PropTypes.string,\n    invalidColor: PropTypes.string,\n    placeholderColor: PropTypes.string,\n\n    onFocus: PropTypes.func,\n    onChange: PropTypes.func,\n    onBecomeEmpty: PropTypes.func,\n    onBecomeValid: PropTypes.func,\n    additionalInputProps: PropTypes.shape(TextInput.propTypes),\n  };\n\n  static defaultProps = {\n    label: \"\",\n    value: \"\",\n    status: \"incomplete\",\n    containerStyle: {},\n    inputStyle: {},\n    labelStyle: {},\n    onFocus: () => {},\n    onChange: () => {},\n    onBecomeEmpty: () => {},\n    onBecomeValid: () => {},\n    additionalInputProps: {},\n  };\n\n  componentWillReceiveProps = newProps => {\n    const { status, value, onBecomeEmpty, onBecomeValid, field } = this.props;\n    const { status: newStatus, value: newValue } = newProps;\n\n    if (value !== \"\" && newValue === \"\") onBecomeEmpty(field);\n    if (status !== \"valid\" && newStatus === \"valid\") onBecomeValid(field);\n  };\n\n  focus = () => this.refs.input.focus();\n\n  _onFocus = () => this.props.onFocus(this.props.field);\n  _onChange = value => this.props.onChange(this.props.field, value);\n\n  render() {\n    const { label, value, placeholder, status, keyboardType,\n            containerStyle, inputStyle, labelStyle,\n            validColor, invalidColor, placeholderColor,\n            additionalInputProps } = this.props;\n    return (\n      <TouchableOpacity onPress={this.focus}\n        activeOpacity={0.99}>\n        <View style={[containerStyle]}>\n          { !!label && <Text style={[labelStyle]}>{label}</Text>}\n          <TextInput ref=\"input\"\n            {...additionalInputProps}\n            keyboardType={keyboardType}\n            autoCapitalise=\"words\"\n            autoCorrect={false}\n            style={[\n              s.baseInputStyle,\n              inputStyle,\n              ((validColor && status === \"valid\") ? { color: validColor } :\n              (invalidColor && status === \"invalid\") ? { color: invalidColor } :\n              {}),\n            ]}\n            underlineColorAndroid={\"transparent\"}\n            placeholderTextColor={placeholderColor}\n            placeholder={placeholder}\n            value={value}\n            onFocus={this._onFocus}\n            onChangeText={this._onChange} />\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}